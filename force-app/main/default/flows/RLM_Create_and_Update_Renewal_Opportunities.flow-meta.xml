<?xml version="1.0" encoding="UTF-8"?>
<Flow xmlns="http://soap.sforce.com/2006/04/metadata">
    <actionCalls>
        <description>Calls an action that gets details about renewable assets in an order.</description>
        <name>GetRenewableAssetsSummary</name>
        <label>Get Renewable Assets Summary</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <actionName>getRenewableAssetsSummary</actionName>
        <actionType>getRenewableAssetsSummary</actionType>
        <connector>
            <targetReference>IterateOverAssets</targetReference>
        </connector>
        <faultConnector>
            <targetReference>SendErrorEmailGetRenewableAssetsSummaryFailed</targetReference>
        </faultConnector>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>orderId</name>
            <value>
                <elementReference>$Record.OrderIdentifier</elementReference>
            </value>
        </inputParameters>
        <nameSegment>getRenewableAssetsSummary</nameSegment>
        <offset>0</offset>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </actionCalls>
    <actionCalls>
        <description>Calls an action that sends an email to the account owner if there’s an error running the Get Renewable Assets Summary invocable action.</description>
        <name>SendErrorEmailGetRenewableAssetsSummaryFailed</name>
        <label>Send Error Email If Get Renewable Assets Summary Fails</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <actionName>emailSimple</actionName>
        <actionType>emailSimple</actionType>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>emailAddresses</name>
            <value>
                <elementReference>ContactEmailAddress</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>senderType</name>
            <value>
                <stringValue>CurrentUser</stringValue>
            </value>
        </inputParameters>
        <inputParameters>
            <name>emailSubject</name>
            <value>
                <stringValue>We couldn’t create or update renewal opportunities</stringValue>
            </value>
        </inputParameters>
        <inputParameters>
            <name>emailBody</name>
            <value>
                <stringValue>&lt;p&gt;{!RenewalOpportunitiesNotCreatedOrUpdatedErrorBodyTextTemplate}&lt;/p&gt;</stringValue>
            </value>
        </inputParameters>
        <nameSegment>emailSimple</nameSegment>
        <offset>0</offset>
    </actionCalls>
    <actionCalls>
        <description>Calls an action that sends an email to an account owner if opportunities in the Opportunities collection aren’t created.</description>
        <name>SendErrorEmailOpportunitiesNotCreated</name>
        <label>Send Error Email If Opportunities Aren’t Created</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <actionName>emailSimple</actionName>
        <actionType>emailSimple</actionType>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>emailAddresses</name>
            <value>
                <elementReference>ContactEmailAddress</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>senderType</name>
            <value>
                <stringValue>CurrentUser</stringValue>
            </value>
        </inputParameters>
        <inputParameters>
            <name>emailSubject</name>
            <value>
                <stringValue>We couldn’t create opportunity records</stringValue>
            </value>
        </inputParameters>
        <inputParameters>
            <name>emailBody</name>
            <value>
                <stringValue>&lt;p&gt;{!OpportunitiesNotCreatedEmailBodyTextTemplate}&lt;/p&gt;</stringValue>
            </value>
        </inputParameters>
        <nameSegment>emailSimple</nameSegment>
        <offset>0</offset>
    </actionCalls>
    <actionCalls>
        <description>Calls an action that sends an email to the account owner if opportunity products in the OpportunityProductsToCreate collection aren’t created.</description>
        <name>SendErrorEmailOpportunityProductsNotCreated</name>
        <label>Send Error Email If Opportunity Products Aren’t Created</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <actionName>emailSimple</actionName>
        <actionType>emailSimple</actionType>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>emailAddresses</name>
            <value>
                <elementReference>ContactEmailAddress</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>emailSubject</name>
            <value>
                <stringValue>We couldn’t create opportunity products</stringValue>
            </value>
        </inputParameters>
        <inputParameters>
            <name>emailBody</name>
            <value>
                <stringValue>&lt;p&gt;{!OpportunityProductsNotCreatedEmailBodyTextTemplate}&lt;/p&gt;</stringValue>
            </value>
        </inputParameters>
        <nameSegment>emailSimple</nameSegment>
        <offset>0</offset>
    </actionCalls>
    <actionCalls>
        <description>Calls an action that sends an email to the account owner if opportunity products in the CanceledOpportunityProducts collection aren’t deleted.</description>
        <name>SendErrorEmailOpportunityProductsNotDeleted</name>
        <label>Send Error Email If Opportunity Products Aren’t Deleted</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <actionName>emailSimple</actionName>
        <actionType>emailSimple</actionType>
        <connector>
            <isGoTo>true</isGoTo>
            <targetReference>UpdateOpportunityProducts</targetReference>
        </connector>
        <faultConnector>
            <isGoTo>true</isGoTo>
            <targetReference>UpdateOpportunityProducts</targetReference>
        </faultConnector>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>emailAddresses</name>
            <value>
                <elementReference>ContactEmailAddress</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>senderType</name>
            <value>
                <stringValue>CurrentUser</stringValue>
            </value>
        </inputParameters>
        <inputParameters>
            <name>emailSubject</name>
            <value>
                <stringValue>We couldn’t delete opportunity products</stringValue>
            </value>
        </inputParameters>
        <inputParameters>
            <name>emailBody</name>
            <value>
                <stringValue>&lt;p&gt;{!OpportunityProductsNotDeletedEmailBodyTextTemplate}&lt;/p&gt;</stringValue>
            </value>
        </inputParameters>
        <inputParameters>
            <name>sendRichBody</name>
        </inputParameters>
        <nameSegment>emailSimple</nameSegment>
        <offset>0</offset>
    </actionCalls>
    <actionCalls>
        <description>Calls an action that sends an email to the account owner if opportunity products in the OpportunityProductsToUpdate collection aren’t updated.</description>
        <name>SendErrorEmailOpportunityProductsNotUpdated</name>
        <label>Send Error Email If Opportunity Products Aren’t Updated</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <actionName>emailSimple</actionName>
        <actionType>emailSimple</actionType>
        <connector>
            <isGoTo>true</isGoTo>
            <targetReference>CreateOpportunities</targetReference>
        </connector>
        <faultConnector>
            <isGoTo>true</isGoTo>
            <targetReference>CreateOpportunities</targetReference>
        </faultConnector>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>emailAddresses</name>
            <value>
                <elementReference>ContactEmailAddress</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>senderType</name>
            <value>
                <stringValue>CurrentUser</stringValue>
            </value>
        </inputParameters>
        <inputParameters>
            <name>emailSubject</name>
            <value>
                <stringValue>We couldn’t update opportunity products</stringValue>
            </value>
        </inputParameters>
        <inputParameters>
            <name>emailBody</name>
            <value>
                <stringValue>&lt;p&gt;Test updation failed body&lt;/p&gt;</stringValue>
            </value>
        </inputParameters>
        <nameSegment>emailSimple</nameSegment>
        <offset>0</offset>
    </actionCalls>
    <apiVersion>65.0</apiVersion>
    <areMetricsLoggedToDataCloud>false</areMetricsLoggedToDataCloud>
    <assignments>
        <description>Adds the asset price and asset quantity  in the loop to the TotalAssetPriceAmount and TotalAssetQuantity variables, respectively.</description>
        <name>AddAssetPriceToTotalAssetPriceAndQuantityToTotalAssetQuantity</name>
        <label>Add Asset Price to Total Asset Price and Quantity to Total Asset Quantity</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <assignmentItems>
            <assignToReference>TotalAssetPriceAmount</assignToReference>
            <operator>Add</operator>
            <value>
                <elementReference>AssetsPriceFormula</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>TotalAssetQuantity</assignToReference>
            <operator>Add</operator>
            <value>
                <elementReference>IterateOverRenewalPriceDetails.quantity</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>IterateOverRenewalPriceDetails</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Sets the field values for opportunityProductToCreate by using the values of the child opportunity product record in the loop. Then adds opportunityProductToCreate to the OpportunityProductsToCreate record collection.</description>
        <name>AddCurrentChildOpportunityToCollection</name>
        <label>Add Current Child Opportunity Product to Collection</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <assignmentItems>
            <assignToReference>OpportunityProductsWithOpportunityIdForSimpleAndRootProducts</assignToReference>
            <operator>Add</operator>
            <value>
                <elementReference>IterateOverOpportunityProductsToCreate</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>IterateOverOpportunityProductsToCreate</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Sets the field values for opportunityProductToCreate and PriceBookEntry and adds them to the OpportunityProductsToCreate and PriceBookEntries record collections respectively.</description>
        <name>AddCurrentOpportunityProductAndPriceBookEntryToCollection</name>
        <label>Add Current Opportunity Product and Price Book Entry to Collections</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <assignmentItems>
            <assignToReference>opportunityProductToCreate.PricebookEntryId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>IterateOverAssets.priceBookEntryId</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>opportunityProductToCreate.Product2Id</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>IterateOverAssets.productId</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>opportunityProductToCreate.UnitPrice</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>AverageAssetPriceAmount</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>opportunityProductToCreate.ServiceDate</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>IterateOverAssets.endDate</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>opportunityProductToCreate.Quantity</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>TotalAssetQuantity</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>priceBookEntry.Pricebook2Id</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>IterateOverAssets.priceBookId</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>priceBookEntry.Id</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>IterateOverAssets.priceBookEntryId</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>PriceBookEntries</assignToReference>
            <operator>Add</operator>
            <value>
                <elementReference>priceBookEntry</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>opportunityProductToCreate.AssetId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>IterateOverAssets.assetId</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>opportunityProductToCreate.OpportunityId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>IterateOverAssets.rootAssetOpportunity</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>OpportunityProductsToCreate</assignToReference>
            <operator>Add</operator>
            <value>
                <elementReference>opportunityProductToCreate</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>IterateOverAssets</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Sets the field values for opportunityProductToUpdate and then adds it to the OpportunityProductsToUpdate record collection.</description>
        <name>AddCurrentOpportunityProductToCollection</name>
        <label>Add Current Opportunity Product to Collection</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <assignmentItems>
            <assignToReference>opportunityProductToUpdate.PricebookEntryId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>IterateOverAssets.priceBookEntryId</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>opportunityProductToUpdate.Product2Id</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>IterateOverAssets.productId</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>opportunityProductToUpdate.UnitPrice</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>AverageAssetPriceAmount</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>opportunityProductToUpdate.LastModifiedDate</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>$System.OriginDateTime</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>opportunityProductToUpdate.Quantity</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>TotalAssetQuantity</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>opportunityProductToUpdate.Id</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>IterateOverAssets.opportunityProductId</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>opportunityProductToUpdate.ServiceDate</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>IterateOverAssets.endDate</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>OpportunityProductsToUpdate</assignToReference>
            <operator>Add</operator>
            <value>
                <elementReference>opportunityProductToUpdate</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>IterateOverAssets</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Adds the current opportunity product record to the OpportunityProductsWithOpportunityIdForAllProducts collection.</description>
        <name>AddCurrentOpportunityProductWithoutReferenceStringToCollection</name>
        <label>Add Current Opportunity Product to Collection</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <assignmentItems>
            <assignToReference>OpportunityProductsWithOpportunityIdForAllProducts</assignToReference>
            <operator>Add</operator>
            <value>
                <elementReference>IterateOverOpportunityProducts</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>IterateOverOpportunityProducts</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Sets the field values for opportunityProductToCreate and then adds it to the OpportunityProductsToCreate collection.</description>
        <name>AddCurrentOpportunityToCollection</name>
        <label>Add Current Opportunity Product to Collection</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <assignmentItems>
            <assignToReference>opportunityProductToCreate.AssetId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>IterateOverOpportunityProducts.AssetId</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>opportunityProductToCreate.PricebookEntryId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>IterateOverOpportunityProducts.PricebookEntryId</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>opportunityProductToCreate.Product2Id</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>IterateOverOpportunityProducts.Product2Id</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>opportunityProductToCreate.UnitPrice</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>IterateOverOpportunityProducts.UnitPrice</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>opportunityProductToCreate.Quantity</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>IterateOverOpportunityProducts.Quantity</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>opportunityProductToCreate.OpportunityId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>IterateOverOpportunityProductsFilterOpportunityProductsInCollectionWithAssetId.OpportunityId</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>opportunityProductToCreate.ServiceDate</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>IterateOverOpportunityProducts.ServiceDate</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>OpportunityProductsWithOpportunityIdForAllProducts</assignToReference>
            <operator>Add</operator>
            <value>
                <elementReference>opportunityProductToCreate</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>IterateOverOpportunityProductsFilterOpportunityProductsInCollectionWithAssetId</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Sets the field values for opportunityProductToCreate by using the values of the root opportunity product record in the loop. Then adds opportunityProductToCreate to the OpportunityProductsToCreate record collection.</description>
        <name>AddCurrentRootOpportunityToCollection</name>
        <label>Add Current Root Opportunity Product to Collection</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <assignmentItems>
            <assignToReference>opportunityProductToCreate.OpportunityId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>IterateOverOpportunitiesToUpdate.Id</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>opportunityProductToCreate.Product2Id</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>IterateOverOpportunityProductsToCreate.Product2Id</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>opportunityProductToCreate.PricebookEntryId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>IterateOverOpportunityProductsToCreate.PricebookEntryId</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>opportunityProductToCreate.ServiceDate</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>IterateOverOpportunityProductsToCreate.ServiceDate</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>opportunityProductToCreate.UnitPrice</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>IterateOverOpportunityProductsToCreate.UnitPrice</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>opportunityProductToCreate.Quantity</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>IterateOverOpportunityProductsToCreate.Quantity</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>opportunityProductToCreate.LastModifiedDate</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>$System.OriginDateTime</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>opportunityProductToCreate.AssetId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>IterateOverOpportunityProductsToCreate.AssetId</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>OpportunityProductsWithOpportunityIdForSimpleAndRootProducts</assignToReference>
            <operator>Add</operator>
            <value>
                <elementReference>opportunityProductToCreate</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>IterateOverOpportunitiesToUpdate</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Adds the opportunity product record in the loop to the CanceledOpportunityProducts record collection.</description>
        <name>AddOpportunityProductToCollectionForDeletion</name>
        <label>Add Opportunity Product to Collection for Deletion</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <assignmentItems>
            <assignToReference>CanceledOpportunityProducts</assignToReference>
            <operator>Add</operator>
            <value>
                <elementReference>IterateOverAssets.opportunityProductId</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>IterateOverAssets</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Adds the current opportunity record to the Opportunities collection.</description>
        <name>AddOpportunityToCollection</name>
        <label>Add Opportunity to Collection</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <assignmentItems>
            <assignToReference>opportunity.Pricebook2Id</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>IterateOverAssets.priceBookId</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>opportunity.CloseDate</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>IterateOverAssets.endDate</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>opportunity.Name</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>OpportunityName</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>opportunity.StageName</assignToReference>
            <operator>Assign</operator>
            <value>
                <stringValue>Proposal/Price Quote</stringValue>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>opportunity.AccountId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>AccountId</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>Opportunities</assignToReference>
            <operator>Add</operator>
            <value>
                <elementReference>opportunity</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <isGoTo>true</isGoTo>
            <targetReference>ResetVariableValues</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Sets the values of the TotalAssetQuantity and TotalWeightedPrice variables to 0. Sets the value of the doesOpportunityExist variable to False.</description>
        <name>ResetVariableValues</name>
        <label>Reset Variable Values</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <assignmentItems>
            <assignToReference>TotalAssetQuantity</assignToReference>
            <operator>Assign</operator>
            <value>
                <numberValue>0.0</numberValue>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>TotalAssetPriceAmount</assignToReference>
            <operator>Assign</operator>
            <value>
                <numberValue>0.0</numberValue>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>DoesOpportunityExist</assignToReference>
            <operator>Assign</operator>
            <value>
                <booleanValue>false</booleanValue>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>IterateOverRenewalPriceDetails</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Sets AverageAssetPriceAmount by using the AverageAssetPriceFormula formula.</description>
        <name>SetAverageAssetPriceAmount</name>
        <label>Set Average Asset Price Amount</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <assignmentItems>
            <assignToReference>AverageAssetPriceAmount</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>AverageAssetPriceFormula</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>ShouldOpportunityProductBeCreatedOrUpdated</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Sets AccountEmailAddress to the email address of the account to which the order belongs.</description>
        <name>SetContactEmailAddress</name>
        <label>Set Contact Email Address</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <assignmentItems>
            <assignToReference>ContactEmailAddress</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>GetContact.Owner.Email</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>AccountId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>GetOrder.AccountId</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>GetRenewableAssetsSummary</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Sets the value of doesOpportunityExist to True.</description>
        <name>SetDoesOpportunityExistVariableValue</name>
        <label>Set Does Opportunity Exist Variable Value</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <assignmentItems>
            <assignToReference>DoesOpportunityExist</assignToReference>
            <operator>Assign</operator>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>IterateOverOpportunitiesWhenTheyExist</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Sets PriceBookId to the ID of the price book that contains the Price Book Entry ID associated with the opportunity product in the loop.</description>
        <name>SetPriceBookID</name>
        <label>Set Price Book ID</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <assignmentItems>
            <assignToReference>PriceBookId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>IterateOverPriceBookEntries.Pricebook2Id</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>IterateOverPriceBookEntries</targetReference>
        </connector>
    </assignments>
    <collectionProcessors>
        <description>Filters records from the Opportunities record collection with matching price book ID and close date. Stores the filtered collection results in the Opportunities from FilterOpportunitiesToIdentifyTheOpportunityToUpdate record collection. The record collection is then used to assign the opportunity ID to an opportunity product.</description>
        <name>FilterOpportunitiesToIdentifyTheOpportunityToUpdate</name>
        <elementSubtype>FilterCollectionProcessor</elementSubtype>
        <label>Filter Opportunities to Identify the Opportunity to Update</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <assignNextValueToReference>currentItem_Filter_Opportunity_Records</assignNextValueToReference>
        <collectionProcessorType>FilterCollectionProcessor</collectionProcessorType>
        <collectionReference>Opportunities</collectionReference>
        <conditionLogic>and</conditionLogic>
        <conditions>
            <leftValueReference>currentItem_Filter_Opportunity_Records.Pricebook2Id</leftValueReference>
            <operator>EqualTo</operator>
            <rightValue>
                <elementReference>PriceBookId</elementReference>
            </rightValue>
        </conditions>
        <conditions>
            <leftValueReference>currentItem_Filter_Opportunity_Records.CloseDate</leftValueReference>
            <operator>EqualTo</operator>
            <rightValue>
                <elementReference>IterateOverOpportunityProductsToCreate.ServiceDate</elementReference>
            </rightValue>
        </conditions>
        <connector>
            <targetReference>IterateOverOpportunitiesToUpdate</targetReference>
        </connector>
    </collectionProcessors>
    <collectionProcessors>
        <description>Filters records from the Opportunities record collection with matching price book ID and close date. Stores the filtered collection results in the Opportunities from FilterOpportunitiesToIdentifyWhetherOpportunityExists record collection. The record collection is then used to check whether an opportunity exists.</description>
        <name>FilterOpportunitiesToIdentifyWhetherOpportunityExists</name>
        <elementSubtype>FilterCollectionProcessor</elementSubtype>
        <label>Filter Opportunities in Collection with Price Book ID and Close Date</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <assignNextValueToReference>currentItem_Filter_If_Opportunity_Exists</assignNextValueToReference>
        <collectionProcessorType>FilterCollectionProcessor</collectionProcessorType>
        <collectionReference>Opportunities</collectionReference>
        <conditionLogic>and</conditionLogic>
        <conditions>
            <leftValueReference>currentItem_Filter_If_Opportunity_Exists.Pricebook2Id</leftValueReference>
            <operator>EqualTo</operator>
            <rightValue>
                <elementReference>IterateOverAssets.priceBookId</elementReference>
            </rightValue>
        </conditions>
        <conditions>
            <leftValueReference>currentItem_Filter_If_Opportunity_Exists.CloseDate</leftValueReference>
            <operator>EqualTo</operator>
            <rightValue>
                <elementReference>IterateOverAssets.endDate</elementReference>
            </rightValue>
        </conditions>
        <connector>
            <targetReference>IterateOverOpportunitiesWhenTheyExist</targetReference>
        </connector>
    </collectionProcessors>
    <collectionProcessors>
        <description>Filters records from the OpportunityProductsWithOpportunityIdForSimpleAndRootProducts record collection with matching asset Id. Stores the filtered collection results in the Opportunities from OpportunityProductsWithOpportunityIdForSimpleAndRootProducts record collection.</description>
        <name>FilterOpportunityProductsInCollectionWithAssetId</name>
        <elementSubtype>FilterCollectionProcessor</elementSubtype>
        <label>Filter Opportunity Products in Collection with Asset ID</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <assignNextValueToReference>currentItem_Filter_OLI_having_this_ref_opportunity_Id</assignNextValueToReference>
        <collectionProcessorType>FilterCollectionProcessor</collectionProcessorType>
        <collectionReference>OpportunityProductsWithOpportunityIdForSimpleAndRootProducts</collectionReference>
        <conditionLogic>and</conditionLogic>
        <conditions>
            <leftValueReference>currentItem_Filter_OLI_having_this_ref_opportunity_Id.AssetId</leftValueReference>
            <operator>EqualTo</operator>
            <rightValue>
                <elementReference>RemoveReferencePrefixFromAssetIdFormula</elementReference>
            </rightValue>
        </conditions>
        <connector>
            <targetReference>IterateOverOpportunityProductsFilterOpportunityProductsInCollectionWithAssetId</targetReference>
        </connector>
    </collectionProcessors>
    <collectionProcessors>
        <description>Filters records from the PriceBookEntries record collection with the Price Book Entry of the opportunity product record in the loop. Stores the filtered collection results in the Opportunities from FilterPriceBookEntrieswithPriceBookEntryID record collection.</description>
        <name>FilterPriceBookEntrieswithPriceBookEntryID</name>
        <elementSubtype>FilterCollectionProcessor</elementSubtype>
        <label>Filter Price Book Entries with Price Book Entry ID</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <assignNextValueToReference>currentItem_Filter_Price_Book_Entry_ID_from_PriceBook_Entry_Records</assignNextValueToReference>
        <collectionProcessorType>FilterCollectionProcessor</collectionProcessorType>
        <collectionReference>PriceBookEntries</collectionReference>
        <conditionLogic>and</conditionLogic>
        <conditions>
            <leftValueReference>currentItem_Filter_Price_Book_Entry_ID_from_PriceBook_Entry_Records.Id</leftValueReference>
            <operator>EqualTo</operator>
            <rightValue>
                <elementReference>IterateOverOpportunityProductsToCreate.PricebookEntryId</elementReference>
            </rightValue>
        </conditions>
        <connector>
            <targetReference>IterateOverPriceBookEntries</targetReference>
        </connector>
    </collectionProcessors>
    <constants>
        <description>Stores the Cancellations picklist value of the lastAssetAction field on an asset record.</description>
        <name>CancelationPicklistValue</name>
        <dataType>String</dataType>
        <value>
            <stringValue>Cancel</stringValue>
        </value>
    </constants>
    <constants>
        <description>Stores the Downsells picklist value of the lastAssetAction field on an asset record.</description>
        <name>DownsellPicklistValue</name>
        <dataType>String</dataType>
        <value>
            <stringValue>Downsells</stringValue>
        </value>
    </constants>
    <constants>
        <description>Stores the Initial Sale picklist value of the lastAssetAction field on an asset record.</description>
        <name>InitialSalePicklistValue</name>
        <dataType>String</dataType>
        <value>
            <stringValue>Initial Sale</stringValue>
        </value>
    </constants>
    <constants>
        <description>Stores the name of the opportunity records to be created. To use a different name for the opportunities created by the flow, change this value.</description>
        <name>OpportunityName</name>
        <dataType>String</dataType>
        <value>
            <stringValue>Renewal Forecast Opportunity</stringValue>
        </value>
    </constants>
    <constants>
        <description>Stores the Renewals picklist value of the lastAssetAction field on an asset record.</description>
        <name>RenewalPicklistValue</name>
        <dataType>String</dataType>
        <value>
            <stringValue>Renew</stringValue>
        </value>
    </constants>
    <constants>
        <description>Stores the prefix for the top-level asset in an asset hierarchy.</description>
        <name>RootAssetOpportunityPrefix</name>
        <dataType>String</dataType>
        <value>
            <stringValue>ref_</stringValue>
        </value>
    </constants>
    <constants>
        <description>Stores the the SDA picklist value of the lastAssetActionSubtype field on an asset record.</description>
        <name>StartDateAdjustmentPicklistValue</name>
        <dataType>String</dataType>
        <value>
            <stringValue>SDA</stringValue>
        </value>
    </constants>
    <constants>
        <description>Stores the Upsells picklist value of the lastAssetAction field on an asset record.</description>
        <name>UpsellPicklistValue</name>
        <dataType>String</dataType>
        <value>
            <stringValue>Upsells</stringValue>
        </value>
    </constants>
    <decisions>
        <description>Determines whether the CanceledOpportunityProducts record collection has at least one record.</description>
        <name>AreThereOpportunityProductsTobeDeleted</name>
        <label>Are There Opportunity Products to be Deleted?</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <defaultConnector>
            <targetReference>UpdateOpportunityProducts</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>No (Default)</defaultConnectorLabel>
        <rules>
            <name>HasOpportunityProductsRecordsToBeDeleted</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>CanceledOpportunityProducts</leftValueReference>
                <operator>IsEmpty</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>DeleteOpportunityProducts</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <description>Determines whether the OpportunityId of the current order product record in the loop exists.</description>
        <name>HasOpportunityId</name>
        <label>Have Opportunity ID?</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <defaultConnector>
            <targetReference>HasReferenceStringInOpportunityIdToAssignOpportunityId</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Yes</defaultConnectorLabel>
        <rules>
            <name>DoesNotHaveOpportunityAvailable</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>IterateOverOpportunityProductsToCreate.OpportunityId</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>FilterPriceBookEntrieswithPriceBookEntryID</targetReference>
            </connector>
            <label>No</label>
        </rules>
    </decisions>
    <decisions>
        <description>Determines whether the value in the OpportunityId field of the current opportunity product record in the loop starts with the string defined in the Reference variable.</description>
        <name>HasReferenceStringInOpportunityIdToAssignOpportunityId</name>
        <label>Have Reference String in the Opportunity ID Field of Opportunity Product?</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <defaultConnector>
            <targetReference>IterateOverOpportunityProductsToCreate</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>No (Default)</defaultConnectorLabel>
        <rules>
            <name>HasReferenceStringInOpportunityIdToAssign</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>IterateOverOpportunityProductsToCreate.OpportunityId</leftValueReference>
                <operator>StartsWith</operator>
                <rightValue>
                    <elementReference>RootAssetOpportunityPrefix</elementReference>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>AddCurrentChildOpportunityToCollection</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <description>Determines whether the value in the OpportunityId field of the current opportunity product record in the loop starts with the string defined in the Reference variable.</description>
        <name>HasReferenceStringInOpportunityIdToCreateOpportunityProduct</name>
        <label>Have Reference String in the Opportunity ID Field of Opportunity Product?</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <defaultConnector>
            <targetReference>AddCurrentOpportunityProductWithoutReferenceStringToCollection</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>No (Default)</defaultConnectorLabel>
        <rules>
            <name>HasReferenceStringInOpportunityIdToCreate</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>IterateOverOpportunityProducts.OpportunityId</leftValueReference>
                <operator>StartsWith</operator>
                <rightValue>
                    <elementReference>RootAssetOpportunityPrefix</elementReference>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>FilterOpportunityProductsInCollectionWithAssetId</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <description>Determines whether the opportunityProductId of the current record in the loop exists.</description>
        <name>HaveOpportunityProductId</name>
        <label>Have Opportunity Product ID?</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <defaultConnector>
            <targetReference>IterateOverAssets</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>No (Default)</defaultConnectorLabel>
        <rules>
            <name>HasOpportunityProductId</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>IterateOverAssets.opportunityProductId</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>AddOpportunityProductToCollectionForDeletion</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <description>Determines whether to create, amend, or delete an opportunity product based on the action subtype, latest action, and rootAssetOpportunity values of an asset.</description>
        <name>HowToProcessAsset</name>
        <label>How to Process Asset?</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <defaultConnector>
            <targetReference>IterateOverAssets</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Other (Default)</defaultConnectorLabel>
        <rules>
            <name>CreateOpportunityProduct</name>
            <conditionLogic>(1 OR 2 OR 3) AND 4</conditionLogic>
            <conditions>
                <leftValueReference>IterateOverAssets.lastAssetActionSubtype</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <elementReference>StartDateAdjustmentPicklistValue</elementReference>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>IterateOverAssets.lastAssetAction</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <elementReference>InitialSalePicklistValue</elementReference>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>IterateOverAssets.lastAssetAction</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <elementReference>RenewalPicklistValue</elementReference>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>IterateOverAssets.rootAssetOpportunity</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>FilterOpportunitiesToIdentifyWhetherOpportunityExists</targetReference>
            </connector>
            <label>Create Opportunity Product</label>
        </rules>
        <rules>
            <name>IsAmendOpportunityProduct</name>
            <conditionLogic>(1 OR 2) OR ((3 OR 5) AND 4)</conditionLogic>
            <conditions>
                <leftValueReference>IterateOverAssets.lastAssetAction</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <elementReference>UpsellPicklistValue</elementReference>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>IterateOverAssets.lastAssetAction</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <elementReference>DownsellPicklistValue</elementReference>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>IterateOverAssets.lastAssetAction</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <elementReference>InitialSalePicklistValue</elementReference>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>IterateOverAssets.rootAssetOpportunity</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>IterateOverAssets.lastAssetAction</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <elementReference>RenewalPicklistValue</elementReference>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>ResetVariableValues</targetReference>
            </connector>
            <label>Amend Opportunity Product</label>
        </rules>
        <rules>
            <name>IsDeleteOpportunityProduct</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>IterateOverAssets.lastAssetAction</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <elementReference>CancelationPicklistValue</elementReference>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>HaveOpportunityProductId</targetReference>
            </connector>
            <label>Delete Opportunity Product</label>
        </rules>
    </decisions>
    <decisions>
        <description>Determines whether the flow is triggered by the last batch in the order to asset process.</description>
        <name>IsLastEvent</name>
        <label>Is Last Event?</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <defaultConnectorLabel>No (Default)</defaultConnectorLabel>
        <rules>
            <name>LastEvent</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.IsLastEvent</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>GetOrder</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <description>Determines whether the current opportunity product must be created or updated based on the latest action value on the asset.</description>
        <name>ShouldOpportunityProductBeCreatedOrUpdated</name>
        <label>Should Opportunity Product be Created Or Updated?</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <defaultConnector>
            <targetReference>AddCurrentOpportunityProductToCollection</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Update Opportunity Product</defaultConnectorLabel>
        <rules>
            <name>IsCreateOpportunityProduct</name>
            <conditionLogic>(1 AND 2) OR (3 OR 4)</conditionLogic>
            <conditions>
                <leftValueReference>IterateOverAssets.lastAssetAction</leftValueReference>
                <operator>NotEqualTo</operator>
                <rightValue>
                    <elementReference>UpsellPicklistValue</elementReference>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>IterateOverAssets.lastAssetAction</leftValueReference>
                <operator>NotEqualTo</operator>
                <rightValue>
                    <elementReference>DownsellPicklistValue</elementReference>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>IterateOverAssets.opportunityProductId</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>IterateOverAssets.lastAssetActionSubtype</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <elementReference>StartDateAdjustmentPicklistValue</elementReference>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>AddCurrentOpportunityProductAndPriceBookEntryToCollection</targetReference>
            </connector>
            <label>Create Opportunity Product</label>
        </rules>
    </decisions>
    <decisions>
        <description>Determines whether an opportunity record must be created by checking if the DoesOpportunityExist is True and if the root asset opportunity of the current record in the loop is null.</description>
        <name>ShouldOpportunityRecordBeCreated</name>
        <label>Should Opportunity Record be Created?</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <defaultConnector>
            <isGoTo>true</isGoTo>
            <targetReference>ResetVariableValues</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>No (Default)</defaultConnectorLabel>
        <rules>
            <name>CreateOpportunityRecord</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>DoesOpportunityExist</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>IterateOverAssets.rootAssetOpportunity</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>AddOpportunityToCollection</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <environments>Default</environments>
    <formulas>
        <description>Calculates the price of assets in the loop by using their renewal price and quantity.</description>
        <name>AssetsPriceFormula</name>
        <dataType>Number</dataType>
        <expression>{!IterateOverRenewalPriceDetails.netUnitPrice}*{!IterateOverRenewalPriceDetails.quantity}</expression>
        <scale>6</scale>
    </formulas>
    <formulas>
        <description>Calculates the average price of an asset by using the asset quantity and total price for all the assets.</description>
        <name>AverageAssetPriceFormula</name>
        <dataType>Number</dataType>
        <expression>{!TotalAssetPriceAmount}/{!TotalAssetQuantity}</expression>
        <scale>6</scale>
    </formulas>
    <formulas>
        <description>Removes the ‘ref_’ string from the asset ID field on an opportunity product record.</description>
        <name>RemoveReferencePrefixFromAssetIdFormula</name>
        <dataType>String</dataType>
        <expression>SUBSTITUTE({!IterateOverOpportunityProducts.OpportunityId}, &quot;ref_&quot;, &quot;&quot;)</expression>
    </formulas>
    <interviewLabel>RLM Create and Update Renewal Opportunities {!$Flow.CurrentDateTime}</interviewLabel>
    <label>RLM Create and Update Renewal Opportunities</label>
    <loops>
        <description>Repeats actions for each asset record in Renewable Assets Summary from Get Asset Summary.</description>
        <name>IterateOverAssets</name>
        <label>Iterate Over Assets</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <collectionReference>GetRenewableAssetsSummary.renewableAssetsSummary</collectionReference>
        <iterationOrder>Asc</iterationOrder>
        <nextValueConnector>
            <targetReference>HowToProcessAsset</targetReference>
        </nextValueConnector>
        <noMoreValuesConnector>
            <targetReference>AreThereOpportunityProductsTobeDeleted</targetReference>
        </noMoreValuesConnector>
    </loops>
    <loops>
        <description>Repeats an action for each record in the Opportunities from Filter Opportunities to Identify the Opportunity to Update record collection variable.</description>
        <name>IterateOverOpportunitiesToUpdate</name>
        <label>Iterate Over Opportunities</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <collectionReference>FilterOpportunitiesToIdentifyTheOpportunityToUpdate</collectionReference>
        <iterationOrder>Asc</iterationOrder>
        <nextValueConnector>
            <targetReference>AddCurrentRootOpportunityToCollection</targetReference>
        </nextValueConnector>
        <noMoreValuesConnector>
            <targetReference>IterateOverOpportunityProductsToCreate</targetReference>
        </noMoreValuesConnector>
    </loops>
    <loops>
        <description>Repeats an action for each record in the Opportunities from Filter Opportunities to Identify Whether an Opportunity Exists in record collection variable.</description>
        <name>IterateOverOpportunitiesWhenTheyExist</name>
        <label>Iterate Over Opportunities</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <collectionReference>FilterOpportunitiesToIdentifyWhetherOpportunityExists</collectionReference>
        <iterationOrder>Asc</iterationOrder>
        <nextValueConnector>
            <targetReference>SetDoesOpportunityExistVariableValue</targetReference>
        </nextValueConnector>
        <noMoreValuesConnector>
            <targetReference>ShouldOpportunityRecordBeCreated</targetReference>
        </noMoreValuesConnector>
    </loops>
    <loops>
        <description>Repeat actions for each record in the OpportunityProductsToCreate record collection variable.</description>
        <name>IterateOverOpportunityProducts</name>
        <label>Iterate Over Opportunity Products</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <collectionReference>OpportunityProductsWithOpportunityIdForSimpleAndRootProducts</collectionReference>
        <iterationOrder>Asc</iterationOrder>
        <nextValueConnector>
            <targetReference>HasReferenceStringInOpportunityIdToCreateOpportunityProduct</targetReference>
        </nextValueConnector>
        <noMoreValuesConnector>
            <targetReference>CreateOpportunityProducts</targetReference>
        </noMoreValuesConnector>
    </loops>
    <loops>
        <description>Repeats an action for each record in the FilterOpportunityProductsInCollectionWithAssetId record collection variable.</description>
        <name>IterateOverOpportunityProductsFilterOpportunityProductsInCollectionWithAssetId</name>
        <label>Iterate Over Opportunity Products</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <collectionReference>FilterOpportunityProductsInCollectionWithAssetId</collectionReference>
        <iterationOrder>Asc</iterationOrder>
        <nextValueConnector>
            <targetReference>AddCurrentOpportunityToCollection</targetReference>
        </nextValueConnector>
        <noMoreValuesConnector>
            <targetReference>IterateOverOpportunityProducts</targetReference>
        </noMoreValuesConnector>
    </loops>
    <loops>
        <description>Repeats actions for each record in the OpportunityProductsToCreate record collection.</description>
        <name>IterateOverOpportunityProductsToCreate</name>
        <label>Iterate Over Opportunity Products</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <collectionReference>OpportunityProductsToCreate</collectionReference>
        <iterationOrder>Asc</iterationOrder>
        <nextValueConnector>
            <targetReference>HasOpportunityId</targetReference>
        </nextValueConnector>
        <noMoreValuesConnector>
            <targetReference>IterateOverOpportunityProducts</targetReference>
        </noMoreValuesConnector>
    </loops>
    <loops>
        <description>Repeats an action for each record in the Price Book Entries from Filter Price Book Entries with Price Book Entry ID record collection variable.</description>
        <name>IterateOverPriceBookEntries</name>
        <label>Iterate Over Price Book Entries</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <collectionReference>FilterPriceBookEntrieswithPriceBookEntryID</collectionReference>
        <iterationOrder>Asc</iterationOrder>
        <nextValueConnector>
            <targetReference>SetPriceBookID</targetReference>
        </nextValueConnector>
        <noMoreValuesConnector>
            <targetReference>FilterOpportunitiesToIdentifyTheOpportunityToUpdate</targetReference>
        </noMoreValuesConnector>
    </loops>
    <loops>
        <description>Repeats an action for each record in the renewalPriceDetails collection of the Current Item from Iterate Over Assets variable.</description>
        <name>IterateOverRenewalPriceDetails</name>
        <label>Iterate Over Renewal Price Details</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <collectionReference>IterateOverAssets.renewalPriceDetails</collectionReference>
        <iterationOrder>Asc</iterationOrder>
        <nextValueConnector>
            <targetReference>AddAssetPriceToTotalAssetPriceAndQuantityToTotalAssetQuantity</targetReference>
        </nextValueConnector>
        <noMoreValuesConnector>
            <targetReference>SetAverageAssetPriceAmount</targetReference>
        </noMoreValuesConnector>
    </loops>
    <processMetadataValues>
        <name>BuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>CanvasMode</name>
        <value>
            <stringValue>AUTO_LAYOUT_CANVAS</stringValue>
        </value>
    </processMetadataValues>
    <processType>AutoLaunchedFlow</processType>
    <recordCreates>
        <description>Creates records using the values in the Opportunities record collection.</description>
        <name>CreateOpportunities</name>
        <label>Create Opportunities</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <connector>
            <targetReference>IterateOverOpportunityProductsToCreate</targetReference>
        </connector>
        <faultConnector>
            <targetReference>SendErrorEmailOpportunitiesNotCreated</targetReference>
        </faultConnector>
        <inputReference>Opportunities</inputReference>
    </recordCreates>
    <recordCreates>
        <description>Creates records using the values in the OpportunityProductsToCreate record collection.</description>
        <name>CreateOpportunityProducts</name>
        <label>Create Opportunity Products</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <faultConnector>
            <targetReference>SendErrorEmailOpportunityProductsNotCreated</targetReference>
        </faultConnector>
        <inputReference>OpportunityProductsWithOpportunityIdForAllProducts</inputReference>
    </recordCreates>
    <recordDeletes>
        <description>Deletes all the opportunity products in CanceledOpportunityProducts.</description>
        <name>DeleteOpportunityProducts</name>
        <label>Delete Opportunity Products</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <connector>
            <targetReference>UpdateOpportunityProducts</targetReference>
        </connector>
        <faultConnector>
            <targetReference>SendErrorEmailOpportunityProductsNotDeleted</targetReference>
        </faultConnector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>In</operator>
            <value>
                <elementReference>CanceledOpportunityProducts</elementReference>
            </value>
        </filters>
        <object>OpportunityLineItem</object>
    </recordDeletes>
    <recordLookups>
        <description>Gets the first contact record with an Account ID matching the Account ID of the order. Stores the result in the Contact from the Get Contact record variable.</description>
        <name>GetContact</name>
        <label>Get Contact</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>SetContactEmailAddress</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>GetOrder.AccountId</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>Account</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <description>Gets the order record with an ID that matches the OrderIdentifier of the event that invokes the flow. Stores the result in the Order from Get Order record variable.</description>
        <name>GetOrder</name>
        <label>Get Order</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>GetContact</targetReference>
        </connector>
        <faultConnector>
            <isGoTo>true</isGoTo>
            <targetReference>GetRenewableAssetsSummary</targetReference>
        </faultConnector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>$Record.OrderIdentifier</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>Order</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordUpdates>
        <description>Updates all the opportunity product records in the OpportunityProductsToUpdate record collection.</description>
        <name>UpdateOpportunityProducts</name>
        <label>Update Opportunity Products</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <connector>
            <targetReference>CreateOpportunities</targetReference>
        </connector>
        <faultConnector>
            <targetReference>SendErrorEmailOpportunityProductsNotUpdated</targetReference>
        </faultConnector>
        <inputReference>OpportunityProductsToUpdate</inputReference>
    </recordUpdates>
    <sourceTemplate>runtime_revenue_arcflows__RenewalOpp</sourceTemplate>
    <start>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <connector>
            <targetReference>IsLastEvent</targetReference>
        </connector>
        <flowRunAsUser>TriggeringUser</flowRunAsUser>
        <object>CreateAssetOrderEvent</object>
        <triggerType>PlatformEvent</triggerType>
    </start>
    <status>Active</status>
    <textTemplates>
        <description>Stores the body of the email that notifies the account owner about the error in creating opportunities and includes a list of the opportunities that couldn&apos;t be created.</description>
        <name>OpportunitiesNotCreatedEmailBodyTextTemplate</name>
        <isViewedAsPlainText>false</isViewedAsPlainText>
        <text>&lt;p&gt;{!GetContact.Owner.Name}&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;background-color: transparent; color: rgb(0, 0, 0); font-family: &amp;quot;Arial Narrow&amp;quot;, sans-serif; font-size: 12pt;&quot;&gt;We couldn’t create these opportunities: {!Opportunities}&lt;/span&gt;&lt;/p&gt;</text>
    </textTemplates>
    <textTemplates>
        <description>Stores the body of the email that notifies the account owner about the error in creating opportunity products and includes a list of the opportunities that couldn&apos;t be created.</description>
        <name>OpportunityProductsNotCreatedEmailBodyTextTemplate</name>
        <isViewedAsPlainText>false</isViewedAsPlainText>
        <text>&lt;p&gt;{!GetContact.Owner.Name}&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;background-color: transparent; color: rgb(0, 0, 0); font-family: &amp;quot;Arial Narrow&amp;quot;, sans-serif; font-size: 12pt;&quot;&gt;We couldn’t create these opportunity products: {!OpportunityProductsToCreate}&lt;/span&gt;&lt;/p&gt;</text>
    </textTemplates>
    <textTemplates>
        <description>Stores the body of the email that notifies the account owner about the error in creating opportunity products and includes a list of the opportunities that couldn&apos;t be deleted.</description>
        <name>OpportunityProductsNotDeletedEmailBodyTextTemplate</name>
        <isViewedAsPlainText>false</isViewedAsPlainText>
        <text>&lt;p&gt;{!GetContact.Owner.Name}&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;background-color: transparent; color: rgb(0, 0, 0); font-family: &amp;quot;Arial Narrow&amp;quot;, sans-serif; font-size: 12pt;&quot;&gt;We couldn’t delete these opportunity products: {!CanceledOpportunityProducts}&lt;/span&gt;&lt;/p&gt;</text>
    </textTemplates>
    <textTemplates>
        <description>Stores the body of the email that notifies the account owner about the error in updating opportunity products and includes a list of the opportunities that couldn&apos;t be updated.</description>
        <name>OpportunityProductsNotUpdatedEmailBodyTextTemplate</name>
        <isViewedAsPlainText>false</isViewedAsPlainText>
        <text>&lt;p&gt;{!GetContact.Owner.Name}&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;background-color: transparent; color: rgb(0, 0, 0); font-family: &amp;quot;Arial Narrow&amp;quot;, sans-serif; font-size: 12pt;&quot;&gt;We couldn’t update these opportunity products: {!OpportunityProductsToUpdate}&lt;/span&gt;&lt;/p&gt;</text>
    </textTemplates>
    <textTemplates>
        <description>Stores the body of the email that notifies the account owner if there&apos;s an error when getting the renewable assets summary.</description>
        <name>RenewalOpportunitiesNotCreatedOrUpdatedErrorBodyTextTemplate</name>
        <isViewedAsPlainText>false</isViewedAsPlainText>
        <text>&lt;p&gt;{!GetContact.Owner.Name}&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;background-color: transparent; color: rgb(0, 0, 0); font-family: &amp;quot;Arial Narrow&amp;quot;, sans-serif; font-size: 12pt;&quot;&gt;We couldn’t create or update renewal opportunities for this order: {!$Record.OrderIdentifier}&lt;/span&gt;&lt;/p&gt;</text>
    </textTemplates>
    <variables>
        <description>Stores the ID of the account to which the order passed into the flow belongs.</description>
        <name>AccountId</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <description>Stores the currency value of the average asset price.</description>
        <name>AverageAssetPriceAmount</name>
        <dataType>Number</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <scale>6</scale>
        <value>
            <numberValue>0.0</numberValue>
        </value>
    </variables>
    <variables>
        <description>Stores the collection of canceled opportunity product IDs for deletion.</description>
        <name>CanceledOpportunityProducts</name>
        <dataType>String</dataType>
        <isCollection>true</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <description>Stores the email address of the contact to whom notification emails are sent.</description>
        <name>ContactEmailAddress</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <name>currentItem_Filter_If_Opportunity_Exists</name>
        <dataType>SObject</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>Opportunity</objectType>
    </variables>
    <variables>
        <name>currentItem_Filter_OLI_having_this_ref_opportunity_Id</name>
        <dataType>SObject</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>OpportunityLineItem</objectType>
    </variables>
    <variables>
        <name>currentItem_Filter_Opportunity_Records</name>
        <dataType>SObject</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>Opportunity</objectType>
    </variables>
    <variables>
        <name>currentItem_Filter_Price_Book_Entry_ID_from_PriceBook_Entry_Records</name>
        <dataType>SObject</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>PricebookEntry</objectType>
    </variables>
    <variables>
        <description>Stores a boolean value that indicates whether an opportunity  record exists in the Opportunities collection.</description>
        <name>DoesOpportunityExist</name>
        <dataType>Boolean</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <value>
            <booleanValue>false</booleanValue>
        </value>
    </variables>
    <variables>
        <description>Stores a collection of opportunity records to be created.</description>
        <name>Opportunities</name>
        <dataType>SObject</dataType>
        <isCollection>true</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>Opportunity</objectType>
    </variables>
    <variables>
        <description>Stores an opportunity record in the loop to be updated by the flow.</description>
        <name>opportunity</name>
        <dataType>SObject</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>Opportunity</objectType>
    </variables>
    <variables>
        <description>Stores a collection of opportunity product records to be created.</description>
        <name>OpportunityProductsToCreate</name>
        <dataType>SObject</dataType>
        <isCollection>true</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>OpportunityLineItem</objectType>
    </variables>
    <variables>
        <description>Stores a collection of opportunity product records to be updated.</description>
        <name>OpportunityProductsToUpdate</name>
        <dataType>SObject</dataType>
        <isCollection>true</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>OpportunityLineItem</objectType>
    </variables>
    <variables>
        <description>Stores a collection of opportunity product records that contain opportunity IDs for all products, including child products.</description>
        <name>OpportunityProductsWithOpportunityIdForAllProducts</name>
        <dataType>SObject</dataType>
        <isCollection>true</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>OpportunityLineItem</objectType>
    </variables>
    <variables>
        <description>Stores a collection of opportunity product records that contain opportunity ID values for simple products and root products.</description>
        <name>OpportunityProductsWithOpportunityIdForSimpleAndRootProducts</name>
        <dataType>SObject</dataType>
        <isCollection>true</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>OpportunityLineItem</objectType>
    </variables>
    <variables>
        <description>Stores an opportunity product record in the loop to be created by the flow.</description>
        <name>opportunityProductToCreate</name>
        <dataType>SObject</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>OpportunityLineItem</objectType>
    </variables>
    <variables>
        <description>Stores an opportunity product record in the loop to be updated by the flow.</description>
        <name>opportunityProductToUpdate</name>
        <dataType>SObject</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>OpportunityLineItem</objectType>
    </variables>
    <variables>
        <description>Stores a collection of price book entry records for all the opportunity products.</description>
        <name>PriceBookEntries</name>
        <dataType>SObject</dataType>
        <isCollection>true</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>PricebookEntry</objectType>
    </variables>
    <variables>
        <description>Stores a price book entry value that’s associated with the opportunity product record in the loop.</description>
        <name>priceBookEntry</name>
        <dataType>SObject</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>PricebookEntry</objectType>
    </variables>
    <variables>
        <description>Stores the price book ID of the opportunity product in the loop.</description>
        <name>PriceBookId</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <description>Stores the currency value of the amount of all the assets in the loop.</description>
        <name>TotalAssetPriceAmount</name>
        <dataType>Number</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <scale>6</scale>
        <value>
            <numberValue>0.0</numberValue>
        </value>
    </variables>
    <variables>
        <description>Stores the total number of assets.</description>
        <name>TotalAssetQuantity</name>
        <dataType>Number</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <scale>6</scale>
        <value>
            <numberValue>0.0</numberValue>
        </value>
    </variables>
</Flow>
